gcc -g p4final.c
 ./a.out
enter the length of array
6
enter the values of an array:
1 2 7 8 12 5
20
 gdb a.out
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
 gcc -g p1final.c
 gcc -g p4final.c
 ./a.out
enter the length of array
5
enter the values of an array:
1 2 7 8 12
20
 gdb a.out
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from a.out...done.
(gdb) b main
Breakpoint 1 at 0x8f8: file p4final.c, line 43.
(gdb) r
Starting program: /home/runner/IA2-Test1-Session2-2/a.out 
warning: Error disabling address space randomization: Operation not permitted

Breakpoint 1, main () at p4final.c:43
43  {
(gdb) n
44    int length=input_array_size();
(gdb) s
input_array_size () at p4final.c:3
3   {
(gdb) n
5     printf("enter the length of array\n");
(gdb) n
enter the length of array
6     scanf("%d",&length);
(gdb) n
5
7     return length;
(gdb) n
8   }
(gdb) n
main () at p4final.c:45
45    int data[length];
(gdb) s
46    input_array(length,data);
(gdb) s
input_array (n=5, a=0x7ffdfe759950) at p4final.c:11
11    printf("enter the values of an array:\n");
(gdb) n
enter the values of an array:
12    for(int i=0;i<n;i++)
(gdb) n
14      scanf("%d",&a[i]);
(gdb) n
1 2 7 8 12
12    for(int i=0;i<n;i++)
(gdb) n
14      scanf("%d",&a[i]);
(gdb) n
12    for(int i=0;i<n;i++)
(gdb) n
14      scanf("%d",&a[i]);
(gdb) n
12    for(int i=0;i<n;i++)
(gdb) n
14      scanf("%d",&a[i]);
(gdb) n
12    for(int i=0;i<n;i++)
(gdb) n
14      scanf("%d",&a[i]);
(gdb) n
12    for(int i=0;i<n;i++)
(gdb) n
16  }
(gdb) n
main () at p4final.c:47
47    int res=sum_composite_numbers(length,data);
(gdb) s
sum_composite_numbers (n=5, a=0x7ffdfe759950) at p4final.c:28
28    int sum=0;
(gdb) n
29    for(int i=0;i<n;i++)
(gdb) n
31      if(is_composite(a[i]))
(gdb) n
29    for(int i=0;i<n;i++)
(gdb) n
31      if(is_composite(a[i]))
(gdb) n
29    for(int i=0;i<n;i++)
(gdb) n
31      if(is_composite(a[i]))
(gdb) n
29    for(int i=0;i<n;i++)
(gdb) n
31      if(is_composite(a[i]))
(gdb) n
33        sum +=a[i];
(gdb) n
29    for(int i=0;i<n;i++)
(gdb) n
31      if(is_composite(a[i]))
(gdb) n
33        sum +=a[i];
(gdb) n
29    for(int i=0;i<n;i++)
(gdb) n
36    return sum;
(gdb) n
37  }
(gdb) n
main () at p4final.c:48
48    out_put(res);
(gdb) s
out_put (sum=20) at p4final.c:40
40    printf("%d\n",sum);
(gdb) n
20
41  }
(gdb) n
main () at p4final.c:49
49    return 0;
(gdb) n
50  }(gdb) n
__libc_start_main (main=0x5621374008e7 <main>, argc=1, argv=0x7ffdfe759aa8, 
    init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, 
    stack_end=0x7ffdfe759a98) at ../csu/libc-start.c:344
344 ../csu/libc-start.c: No such file or directory.
(gdb) c
Continuing.
[Inferior 1 (process 250) exited normally]
(gdb) sum_composite_numbers